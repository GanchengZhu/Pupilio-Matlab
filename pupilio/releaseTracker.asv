function success = releaseTracker(trackerHandler)
    %RELEASETRACKER Release all tracker resources
    %   success = releaseTracker(trackerHandler) attempts to properly release
    %   resources and unload the library. Returns true if successful.
    
    % Initialize output
    success = false;
    
    % Input validation
    if nargin < 1 || isempty(trackerHandler) || ~isfield(trackerHandler, 'libName')
        error('releaseTracker:invalidInput', 'Invalid tracker handle');
        return;
    end
    
    LIB_NAME = trackerHandler.libName;
    SUCCESS_CODE = 0;
    
    % Early return if library not loaded
    if ~libisloaded(LIB_NAME)
        %fprintf('[%s] Library not loaded - nothing to release\n', LIB_NAME);
        success = true;  % Considered successful if nothing to do
        return;
    end
    
    %% Phase 1: Release tracker resources
    for attempt = 1:MAX_ATTEMPTS
        try
            releaseStatus = calllib(LIB_NAME, 'mlif_pupil_io_release');
            
            if releaseStatus == 0
                fprintf('[%s] Successfully released resources (attempt %d)\n', ...
                       LIB_NAME, attempt);
                success = true;
                break;
            else
                fprintf('[%s] Release failed with code %d (attempt %d)\n', ...
                       LIB_NAME, releaseStatus, attempt);
            end
            
        catch ME
            fprintf('[%s] Release error on attempt %d: %s\n', ...
                   LIB_NAME, attempt, ME.message);
        end
        
        % Only delay if we're going to try again
        if attempt < MAX_ATTEMPTS
            pause(RETRY_DELAY);
        end
    end
    
    try
        %% Phase 2: Unload library
        unloadlibrary(LIB_NAME);
        fprintf('[%s] Library unloaded successfully\n', LIB_NAME);
        
        %% Phase 3: Update handle state (if handle is passed by reference)
        if isfield(trackerHandler, 'isInitialized')
            trackerHandler.isInitialized = false;
        end
        
        success = true;
        
    catch ME
        %% Enhanced error handling
        fprintf('[%s] Release error: %s\n', LIB_NAME, getReport(ME, 'extended'));
        
        % Emergency cleanup attempt
        try
            if libisloaded(LIB_NAME)
                unloadlibrary(LIB_NAME);
                fprintf('[%s] Emergency unload completed\n', LIB_NAME);
            end
        catch
            fprintf('[%s] FATAL: Library could not be unloaded\n', LIB_NAME);
            % Consider adding system-level cleanup here if needed
        end
    end
end