% PUPILIO calibration routine testing
clear; close all; clc; sca;

% Initialize the tracker with custom configurations
config = DefaultConfig();
config.lang ="en-US";
config.cali_mode = 2;
[success, tracker] = initializeTracker(config);

% Create a new session with a descriptive name
sessionName = 'Participant12_Trial3';  % Can also use char array ('Participant12_Trial3')
createSession(tracker, sessionName);

% Initialize Psychtoolbox and open a window for calibration and graphics
PsychDefaultSetup(2);
Screen('Preference', 'SkipSyncTests', 1);


Screen('Preference', 'Verbosity', 0);  % 0=Errors only, 1=Warnings, 2=Info, 3=Debug
Screen('Preference', 'VisualDebugLevel', 3); % 3=no splash

whichScreen = max(Screen('Screens'));
[window, windowRect] = Screen('OpenWindow', whichScreen);

% calibration
cali = CalibrationUI(tracker, window);
cali.draw(true);

try
    % load images for drawing etc.
    imagePath = 'old_town.jpg'; % Replace with your image path
    imageMatrix = imread(imagePath);

    % Get image size and position (centered)
    [imageWidth, imageHeight, ~] = size(imread(imagePath));
    [screenWidth, screenHeight] = RectSize(windowRect);

    % Calculate scaling to fill screen while maintaining aspect ratio
    scale = max([screenWidth/imageWidth, screenHeight/imageHeight]);
    newWidth = imageWidth * scale;
    newHeight = imageHeight * scale;

    imageTexture = Screen('MakeTexture', window, imageMatrix);

    % Cursor parameters
    cursorSize = double(20);
    cursorColor = [255 0 0]; % Red
    cursorWidth = double(3); % Line width

    % Start & Stop Sampling
    [samplingSuccess, statusCode] = startSampling(tracker);

    % Run the eye-tracking portion of the experiment
    disp('Beginning eye-tracking experiment...');

    % Create a timer that will run for 3 seconds
    duration = 10; % seconds
    startTime = tic;

    while toc(startTime) < duration
        % Get current gaze data
        % [success, left, right, bino] = getCurrentGaze(tracker);
        %
        % if success
        %     fprintf('Left: [%.3f,%.3f,%.3f] Right: [%.3f,%.3f,%.3f] Binocular: [%.3f,%.3f,%.3f]\n',...
        %             left(1), left(2), left(3), right(1), right(2), right(3), bino(1), bino(2), bino(3));
        % end

        [success, left, right, ts] = estimateGaze(tracker);
        if success
            % fprintf('Left: [%.2f,%.2f] Right: [%.2f,%.2f] @ %dÎ¼s\n',...
            %     left(1),left(2),right(1),right(2),ts);

            destRect = CenterRect([0 0 newWidth newHeight], windowRect);
            Screen('DrawTexture', window, imageTexture, [], destRect);

            % Draw custom cursor (crosshair)
            x = double(right(1));
            y = double(right(2));
            Screen('DrawLine', window, cursorColor,...
                x-cursorSize, y, x+cursorSize, y, cursorWidth);
            Screen('DrawLine', window, cursorColor,...
                x, y-cursorSize, x, y+cursorSize, cursorWidth);
        end

        % Flip to screen
        Screen('Flip', window);
    end
catch ME
    fprintf('Matlab error: %s\n', ME.message);
end

fprintf('Gaze tracking completed after %.1f seconds.\n', duration);
% Stop sampling when done (assuming similar stopSampling() exists)
stopSampling(tracker);
WaitSecs(0.2); % wait for 0.2 seconds for tracker to stop recording


% save data to file
savePath = fullfile(pwd, 'data', ['eyetrack_' datestr(now,'yyyymmdd_HHMMSS') '.txt']);
if saveDataTo(tracker, savePath)
    disp(['Data saved to: ' savePath]);
else
    error('Failed to save eye tracking data');
end

% release the tracker
releaseTracker(tracker);
sca;